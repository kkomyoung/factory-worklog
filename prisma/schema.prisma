// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 사용자 정보
model User {
  id           String  @id @default(cuid())
  loginId      String  @unique // 로그인용 ID (사번)
  password     String
  name         String
  role         Role    @default(WORKER)

  // 역할별 전용 컬럼
  licensePhoto String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workLogs   WorkLog[]
  changeHistories WorkLogHistory[] @relation("AdminHistory")

  @@index([role])
  @@map("users")
}

enum Role {
  ADMIN
  WORKER
}


// 작업 라인
model Line {
  id        String    @id @default(cuid())
  name      String
  order     Int
  processes Process[]
  createdAt DateTime  @default(now())
}
// 작업 공정
model Process {
  id        String   @id @default(cuid())
  name      String
  order     Int
  lineId    String
  line      Line     @relation(fields: [lineId], references: [id])

  workLogs  WorkLog[]
  createdAt DateTime  @default(now())
}

// 작업 기록
model WorkLog {
  id        String   @id @default(cuid())
  userId    String // User.id 를 참조
  processId String
  startedAt DateTime @default(now())
  endedAt   DateTime?
  durationMinutes  Int   // 작업 시간
  shiftType       ShiftType
  isDefective     Boolean  @default(false) // 불량 여부
  memo String // 메모


  user    User    @relation(fields: [userId], references: [id])
  process Process @relation(fields: [processId], references: [id])

  histories WorkLogHistory[]

  @@index([userId])
  @@index([processId])
  @@index([startedAt])
}

enum ShiftType {
  DAY_NORMAL // 주간-정상
  DAY_OVERTIME // 주간-잔업
  NIGHT_NORMAL // 야간-정상
  NIGHT_OVERTIME // 야간-잔업
  UNKNOWN   // 알수없음
}

model WorkLogHistory {
  id          String   @id @default(cuid())
  workLogId   String
  field       String         // 예: "endedAt", "isDefective", "memo"
  oldValue    String?
  newValue    String?
  changedBy   String         // User.id (관리자)
  changedAt   DateTime @default(now())

  workLog WorkLog @relation(fields: [workLogId], references: [id])
  admin   User    @relation("AdminHistory", fields: [changedBy], references: [id])
}